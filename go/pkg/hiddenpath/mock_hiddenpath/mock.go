// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/hiddenpath (interfaces: SegmentDBRead,RPC,Verifier,Lookuper)

// Package mock_hiddenpath is a generated GoMock package.
package mock_hiddenpath

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	addr "github.com/scionproto/scion/go/lib/addr"
	seg "github.com/scionproto/scion/go/lib/ctrl/seg"
	hiddenpath "github.com/scionproto/scion/go/pkg/hiddenpath"
	net "net"
	reflect "reflect"
)

// MockSegmentDBRead is a mock of SegmentDBRead interface
type MockSegmentDBRead struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentDBReadMockRecorder
}

// MockSegmentDBReadMockRecorder is the mock recorder for MockSegmentDBRead
type MockSegmentDBReadMockRecorder struct {
	mock *MockSegmentDBRead
}

// NewMockSegmentDBRead creates a new mock instance
func NewMockSegmentDBRead(ctrl *gomock.Controller) *MockSegmentDBRead {
	mock := &MockSegmentDBRead{ctrl: ctrl}
	mock.recorder = &MockSegmentDBReadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSegmentDBRead) EXPECT() *MockSegmentDBReadMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockSegmentDBRead) Get(arg0 context.Context, arg1 addr.IA, arg2 []hiddenpath.GroupID) ([]hiddenpath.DBSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].([]hiddenpath.DBSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSegmentDBReadMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSegmentDBRead)(nil).Get), arg0, arg1, arg2)
}

// MockRPC is a mock of RPC interface
type MockRPC struct {
	ctrl     *gomock.Controller
	recorder *MockRPCMockRecorder
}

// MockRPCMockRecorder is the mock recorder for MockRPC
type MockRPCMockRecorder struct {
	mock *MockRPC
}

// NewMockRPC creates a new mock instance
func NewMockRPC(ctrl *gomock.Controller) *MockRPC {
	mock := &MockRPC{ctrl: ctrl}
	mock.recorder = &MockRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRPC) EXPECT() *MockRPCMockRecorder {
	return m.recorder
}

// HiddenSegments mocks base method
func (m *MockRPC) HiddenSegments(arg0 context.Context, arg1 hiddenpath.SegmentRequest, arg2 net.Addr) ([]*seg.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HiddenSegments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*seg.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HiddenSegments indicates an expected call of HiddenSegments
func (mr *MockRPCMockRecorder) HiddenSegments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HiddenSegments", reflect.TypeOf((*MockRPC)(nil).HiddenSegments), arg0, arg1, arg2)
}

// MockVerifier is a mock of Verifier interface
type MockVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockVerifierMockRecorder
}

// MockVerifierMockRecorder is the mock recorder for MockVerifier
type MockVerifierMockRecorder struct {
	mock *MockVerifier
}

// NewMockVerifier creates a new mock instance
func NewMockVerifier(ctrl *gomock.Controller) *MockVerifier {
	mock := &MockVerifier{ctrl: ctrl}
	mock.recorder = &MockVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVerifier) EXPECT() *MockVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method
func (m *MockVerifier) Verify(arg0 context.Context, arg1 []*seg.Meta, arg2 net.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockVerifierMockRecorder) Verify(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVerifier)(nil).Verify), arg0, arg1, arg2)
}

// MockLookuper is a mock of Lookuper interface
type MockLookuper struct {
	ctrl     *gomock.Controller
	recorder *MockLookuperMockRecorder
}

// MockLookuperMockRecorder is the mock recorder for MockLookuper
type MockLookuperMockRecorder struct {
	mock *MockLookuper
}

// NewMockLookuper creates a new mock instance
func NewMockLookuper(ctrl *gomock.Controller) *MockLookuper {
	mock := &MockLookuper{ctrl: ctrl}
	mock.recorder = &MockLookuperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLookuper) EXPECT() *MockLookuperMockRecorder {
	return m.recorder
}

// Segments mocks base method
func (m *MockLookuper) Segments(arg0 context.Context, arg1 hiddenpath.SegmentRequest) ([]*seg.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Segments", arg0, arg1)
	ret0, _ := ret[0].([]*seg.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Segments indicates an expected call of Segments
func (mr *MockLookuperMockRecorder) Segments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Segments", reflect.TypeOf((*MockLookuper)(nil).Segments), arg0, arg1)
}
